<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Application.EntityFrameworkCore.Extension</name>
    </assembly>
    <members>
        <member name="T:Application.EntityFrameworkCore.Extension.AggregateRoot`1">
            <summary>
            聚合跟实现
            </summary>
            <typeparam name="T">主键类型</typeparam>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.AggregateRoot`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Application.EntityFrameworkCore.Extension.Config.Attributes.OnConfiguringAttribute">
            <summary>
            EFCore OnModelCreating 重写标记
            </summary>
        </member>
        <member name="T:Application.EntityFrameworkCore.Extension.Config.Attributes.OnModelCreatingAttribute">
            <summary>
            EFCore OnModelCreating 重写标记
            </summary>
        </member>
        <member name="T:Application.EntityFrameworkCore.Extension.Config.ConnectionConfig">
            <summary>
            数据库连接配置信息
            </summary>
        </member>
        <member name="P:Application.EntityFrameworkCore.Extension.Config.ConnectionConfig.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Application.EntityFrameworkCore.Extension.Config.ConnectionConfig.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Application.EntityFrameworkCore.Extension.Config.ConnectionConfig.MigrationsAssembly">
            <summary>
            数据库映射的程序集名称
            </summary>
        </member>
        <member name="E:Application.EntityFrameworkCore.Extension.Config.DbContextConfig.EntityFrameworkCoreOnConfiguring">
            <summary>
            OnConfiguring事件
            </summary>
        </member>
        <member name="E:Application.EntityFrameworkCore.Extension.Config.DbContextConfig.EntityFrameworkCoreOnModelCreating">
            <summary>
            OnModelCreating事件
            </summary>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Config.DbContextConfig.ListenOnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,Application.EntityFrameworkCore.Extension.Config.ConnectionConfig)">
            <summary>
            监听OnConfiguring事件
            </summary>
            <param name="optionsBuilder"></param>
            <param name="connectionConfig"></param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Config.DbContextConfig.ListenOnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            监听OnModelCreating事件
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="P:Application.EntityFrameworkCore.Extension.Config.EntityFrameworkCoreConfiguration.ConnectionConfig">
            <summary>
            数据库连接配置
            </summary>
        </member>
        <member name="P:Application.EntityFrameworkCore.Extension.Config.EntityFrameworkCoreConfiguration.MapperTypes">
            <summary>
            EF映射的Mapper Type 集合
            </summary>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Config.EntityFrameworkCoreConfiguration.RegisterDbContextConfig">
            <summary>
            注册DbContext配置
            </summary>
        </member>
        <member name="T:Application.EntityFrameworkCore.Extension.Config.EntityFrameworkCoreEventHandlers.OnConfiguring">
            <summary>
            OnConfiguring委托
            </summary>
            <param name="optionsBuilder"></param>
            <param name="connectionConfig"></param>
        </member>
        <member name="T:Application.EntityFrameworkCore.Extension.Config.EntityFrameworkCoreEventHandlers.OnModelCreating">
            <summary>
            OnModelCreating委托
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:Application.EntityFrameworkCore.Extension.Config.Enum.DbTypeEnum">
            <summary>
            数据库类型枚举
            </summary>
        </member>
        <member name="F:Application.EntityFrameworkCore.Extension.Config.Enum.DbTypeEnum.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="F:Application.EntityFrameworkCore.Extension.Config.Enum.DbTypeEnum.SqlServer">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="P:Application.EntityFrameworkCore.Extension.Config.Options.EntityFrameworkCoreOption.ConnectionConfig">
            <summary>
            数据库连接配置
            </summary>
        </member>
        <member name="T:Application.EntityFrameworkCore.Extension.Entity`1">
            <summary>
            实体实现
            </summary>
            <typeparam name="T">主键类型</typeparam>
        </member>
        <member name="P:Application.EntityFrameworkCore.Extension.Entity`1.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.EntityFrameworkCoreDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Application.EntityFrameworkCore.Extension.EntityFrameworkCoreDbContext})">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.EntityFrameworkCoreDbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            重写数据库配置
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.EntityFrameworkCoreDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            重写模型构建
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.EntityFrameworkCoreDbContext.Commit">
            <summary>
            提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.EntityFrameworkCoreDbContext.CommitAsync">
            <summary>
            提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.EntityFrameworkCoreDbContext.RollBack">
            <summary>
            回滚
            </summary>
            <returns></returns>
        </member>
        <member name="P:Application.EntityFrameworkCore.Extension.Interface.IEntity`1.Id">
            <summary>
            主键id
            </summary>
        </member>
        <member name="T:Application.EntityFrameworkCore.Extension.Interface.IQuery`2">
            <summary>
            查询方法
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IQuery`2.GetQueryable">
            <summary>
            获取IQueryable的方法（非跟踪查询 不可用于修改、删除、添加）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IRepository`2.Add(`0)">
            <summary>
            添加
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IRepository`2.AddAsync(`0)">
            <summary>
            异步添加
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IRepository`2.Remove(`0)">
            <summary>
            删除
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IRepository`2.RemoveRange(System.Collections.Generic.List{`0})">
            <summary>
            批量移除
            </summary>
            <param name="entities">实体</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IRepository`2.Update(`0)">
            <summary>
            更新
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IRepository`2.UpdateRange(System.Collections.Generic.List{`0})">
            <summary>
            批量更新
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IRepository`2.AddRange(System.Collections.Generic.List{`0})">
            <summary>
            添加集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IRepository`2.AddRangeAsync(System.Collections.Generic.List{`0})">
            <summary>
            添加集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IRepository`2.Add(`0,System.Boolean)">
            <summary>
            添加
            </summary>
            <param name="entity">实体</param>
            <param name="autoCommit">是否自动提交事务</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IRepository`2.AddAsync(`0,System.Boolean)">
            <summary>
            异步添加
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
            <param name="autoCommit">是否自动提交事务</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IRepository`2.Remove(`0,System.Boolean)">
            <summary>
            删除
            </summary>
            <param name="entity">实体</param>
            <param name="autoCommit">是否自动提交事务</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IRepository`2.Update(`0,System.Boolean)">
            <summary>
            更新
            </summary>
            <param name="entity">实体</param>
            <param name="autoCommit">是否自动提交事务</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IRepository`2.AddRange(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            添加集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="autoCommit">是否自动提交事务</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IRepository`2.AddRangeAsync(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            添加集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="autoCommit">是否自动提交事务</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IRepository`2.FindById(`1)">
            <summary>
            根据主键id查询
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Application.EntityFrameworkCore.Extension.Interface.IUnitOfWork">
            <summary>
            单元模式
            </summary>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IUnitOfWork.Commit">
            <summary>
            提交事务保存至数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IUnitOfWork.CommitAsync">
            <summary>
            提交事务保存至数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Interface.IUnitOfWork.RollBack">
            <summary>
            回滚
            </summary>
            <returns></returns>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Migration.EntityFrameworkCoreMigration.Migrate">
            <summary>
            执行表重构
            </summary>
            <returns></returns>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Migration.EntityFrameworkCoreMigration.Migrationing(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation},Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            迁移数据库结构
            </summary>
            <param name="upOperations"></param>
            <param name="dbContext"></param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Migration.EntityFrameworkCoreMigration.ExecuteListSqlCommand(Microsoft.EntityFrameworkCore.DbContext,System.Collections.Generic.List{System.String})">
            <summary>
            执行多条sql
            </summary>
            <param name="dbContext"></param>
            <param name="sqlList"></param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Migration.Interface.IEntityFrameworkCoreMigration.Migrate">
            <summary>
            迁移表结构
            </summary>
            <returns></returns>
        </member>
        <member name="T:Application.EntityFrameworkCore.Extension.PageData`1">
            <summary>
            分页数据集合
            </summary>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.PageData`1.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.PageData`1.#ctor(System.Int32,System.Collections.Generic.List{`0},System.Object)">
             <summary>
            
             </summary>
             <param name="rowCount">总条数</param>
             <param name="data">数据集合</param>
             <param name="extendedData">扩展信息</param>
        </member>
        <member name="P:Application.EntityFrameworkCore.Extension.PageData`1.RowCount">
            <summary>
            总条数
            </summary>
        </member>
        <member name="P:Application.EntityFrameworkCore.Extension.PageData`1.Data">
            <summary>
            当前页数据集合
            </summary>
        </member>
        <member name="F:Application.EntityFrameworkCore.Extension.QueryBase`2.Dbcontext">
             <summary>
            数据库上下文
             </summary>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.QueryBase`2.#ctor(Application.EntityFrameworkCore.Extension.Interface.IUnitOfWork)">
             <summary>
            构造函数
             </summary>
             <param name="unitOfWork">工作单元</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.QueryBase`2.GetQueryable">
            <summary>
            获取IQueryable （非跟踪查询 不可用于修改、删除、添加）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.QueryExtension.ListPager``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Boolean)">
            <summary>
            得到IQueryable的分页后实体集合
            </summary>
            <param name="query">实体</param>
            <param name="pageSize">每页多少条数据</param>
            <param name="pageIndex">当前页</param>
            <param name="isTotal">是否统计总行数</param>
            <returns></returns>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.QueryExtension.ListPager``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Int32,System.Boolean)">
            <summary>
            对list集合分页
            </summary>
            <param name="query"></param>
            <param name="pageSize">页码</param>
            <param name="pageIndex">页大小</param>
            <param name="isTotal">是否计算总条数</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Application.EntityFrameworkCore.Extension.RepositoryBase`2">
            <summary>
            增删改查仓储接口
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Application.EntityFrameworkCore.Extension.RepositoryBase`2.UnitOfWork">
            <summary>
            单元模式
            </summary>
        </member>
        <member name="F:Application.EntityFrameworkCore.Extension.RepositoryBase`2.Dbcontext">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.#ctor(Application.EntityFrameworkCore.Extension.Interface.IUnitOfWork)">
            <summary>
            构造函数
            </summary>
            <param name="unitOfWork"></param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.DbSet">
            <summary>
            设置当前DbContext
            </summary>
            <returns></returns>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.DbSet``1">
            <summary>
            设置DbContext
            </summary>
            <typeparam name="DbEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.Add(`0)">
            <summary>
            添加
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.AddAsync(`0)">
            <summary>
            异步添加
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.AddRange(System.Collections.Generic.List{`0})">
            <summary>
            添加集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.AddRangeAsync(System.Collections.Generic.List{`0})">
            <summary>
            添加集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.Remove(`0)">
            <summary>
            移除
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.RemoveRange(System.Collections.Generic.List{`0})">
            <summary>
            批量移除
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.Update(`0)">
            <summary>
            更新
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.UpdateRange(System.Collections.Generic.List{`0})">
            <summary>
            批量更新
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.Add(`0,System.Boolean)">
            <summary>
            添加
            </summary>
            <param name="entity">实体</param>
            <param name="autoCommit">是否自动提交</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.AddAsync(`0,System.Boolean)">
            <summary>
            异步添加
            </summary>
            <param name="entity">实体</param>
            <param name="autoCommit">是否自动提交</param>
            <returns></returns>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.AddRange(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            添加集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="autoCommit">是否自动提交</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.AddRangeAsync(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            添加集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="autoCommit">是否自动提交</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.Remove(`0,System.Boolean)">
            <summary>
            移除
            </summary>
            <param name="entity">实体</param>
            <param name="autoCommit">是否自动提交</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.Update(`0,System.Boolean)">
            <summary>
            更新
            </summary>
            <param name="entity">实体</param>
            <param name="autoCommit">是否自动提交</param>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.RepositoryBase`2.FindById(`1)">
            <summary>
            根据主键id查询
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Application.EntityFrameworkCore.Extension.Startup.AddEntityFrameworkCore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Application.EntityFrameworkCore.Extension.Config.Options.EntityFrameworkCoreOption})">
            <summary>
            添加EFCore启动
            </summary>
            <param name="services">服务集合</param>
            <param name="optionsBuilder">配置信息</param>
        </member>
    </members>
</doc>
