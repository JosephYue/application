<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Application.Frame.Extension</name>
    </assembly>
    <members>
        <member name="M:Application.Frame.Extension.Common.OptionCommon.GetOption``1">
            <summary>
            获取Option的内容信息（项目未初始化完成之前无法使用）
            Startup内:无法使用
            Program内:无法使用
            </summary>
            <typeparam name="TOption">Option的泛型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Application.Frame.Extension.Common.OptionCommon.GetOption(System.Type)">
            <summary>
            获取Option的内容信息（项目未初始化完成之前无法使用）
            Startup内:无法使用
            Program内:无法使用
            </summary>
            <param name="type">Option的Type 例：typeof(xxxOption)</param>
            <returns></returns>
        </member>
        <member name="T:Application.Frame.Extension.Common.ServiceProviderCommon">
            <summary>
            服务提供者公共方法（项目未初始化完成之前无法使用）
            Startup内:无法使用
            Program内:无法使用
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Common.ServiceProviderCommon.GetServiceProvider">
            <summary>
            获取IServiceProvider
            </summary>
            <returns></returns>
        </member>
        <member name="T:Application.Frame.Extension.Config.Attributes.OptionAttribute">
            <summary>
            Option标识 带有此标识会被自动识别匹配appsettings.json内的字段
            注：可用构造函数注入，可注入到构造函数中直接使用
            注：假如有多个层级，请将层级路径传入，否则将无法正确识别匹配（例：Logging:LogLevel）
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Config.Attributes.OptionAttribute.#ctor(System.String)">
            <summary>
            构造函数
            注：假如有多个层级，请将层级路径传入，否则将无法正确识别匹配
            </summary>
            <param name="url"></param>
        </member>
        <member name="P:Application.Frame.Extension.Config.Attributes.OptionAttribute.Url">
            <summary>
            路径
            </summary>
        </member>
        <member name="T:Application.Frame.Extension.Config.Attributes.ServiceAttribute">
            <summary>
            服务标识
            注：带有此标识的会被注册进容器
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Config.Attributes.ServiceAttribute.#ctor">
            <summary>
            服务标识
            注：带有此标识的会被注册进容器
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Config.Attributes.ServiceAttribute.#ctor(System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            服务标识
            注：带有此标识的会被注册进容器
            </summary>
            <param name="as">当前参数必须为接口，被标记的类必须是当前接口参数的实现</param>
            <param name="lifetime">服务的生命周期</param>
        </member>
        <member name="P:Application.Frame.Extension.Config.Attributes.ServiceAttribute.Lifetime">
            <summary>
            注册服务生命周期
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.Config.Attributes.ServiceAttribute.InterfaceType">
            <summary>
            接口类型
            </summary>
        </member>
        <member name="T:Application.Frame.Extension.Config.Attributes.TransientServiceAttribute">
            <summary>
            服务标识（瞬时：Transient）
            注：带有此标识的会被注册进容器
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Config.Attributes.TransientServiceAttribute.#ctor">
            <summary>
            服务标识
            注：带有此标识的会被注册进容器
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Config.Attributes.TransientServiceAttribute.#ctor(System.Type)">
            <summary>
            服务标识
            注：带有此标识的会被注册进容器
            </summary>
            <param name="as">当前参数必须为接口，被标记的类必须是当前接口参数的实现</param>
        </member>
        <member name="T:Application.Frame.Extension.Config.Attributes.ScopedServiceAttribute">
            <summary>
            服务标识（局域：Scoped）
            注：带有此标识的会被注册进容器
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Config.Attributes.ScopedServiceAttribute.#ctor">
            <summary>
            服务标识
            注：带有此标识的会被注册进容器
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Config.Attributes.ScopedServiceAttribute.#ctor(System.Type)">
            <summary>
            服务标识
            注：带有此标识的会被注册进容器
            </summary>
            <param name="as">当前参数必须为接口，被标记的类必须是当前接口参数的实现</param>
        </member>
        <member name="T:Application.Frame.Extension.Config.Attributes.SingletonServiceAttribute">
            <summary>
            服务标识（单例：Singleton）
            注：带有此标识的会被注册进容器
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Config.Attributes.SingletonServiceAttribute.#ctor">
            <summary>
            服务标识
            注：带有此标识的会被注册进容器
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Config.Attributes.SingletonServiceAttribute.#ctor(System.Type)">
            <summary>
            服务标识
            注：带有此标识的会被注册进容器
            </summary>
            <param name="as">当前参数必须为接口，被标记的类必须是当前接口参数的实现</param>
        </member>
        <member name="T:Application.Frame.Extension.Config.Filters.ActionMiddlewareStartupFilter">
            <summary>
            Startup 中间件
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Config.Filters.ActionMiddlewareStartupFilter.#ctor(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder},System.Boolean)">
            <summary>
            Startup 中间件
            </summary>
            <param name="middlewareDelegate">中间件委托</param>
            <param name="pre">是否前置（标识注册的管道在之前执行还是之后执行）</param>
        </member>
        <member name="T:Application.Frame.Extension.Config.Filters.EnumSchemaFilter">
            <summary>
            枚举过滤器
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Config.Filters.EnumSchemaFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <summary>
            实现过滤器方法
            </summary>
            <param name="model"></param>
            <param name="context"></param>
        </member>
        <member name="T:Application.Frame.Extension.Config.Filters.SwaggerHeaderFilter">
            <summary>
            SwaggerHeader过滤器
            </summary>
        </member>
        <member name="T:Application.Frame.Extension.Config.Options.FrameSwaggerOptions">
            <summary>
            Swagger配置信息
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.Config.Options.FrameSwaggerOptions.EnableSwagger">
            <summary>
            是否启用Swagger文档
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.Config.Options.FrameSwaggerOptions.DefaultSwaggerConfig">
            <summary>
            默认的swagger页面配置
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.Config.Options.FrameSwaggerOptions.GroupSwaggerConfigs">
            <summary>
            Swagger的分组配置
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.Config.Options.FrameSwaggerOptions.SwaggerHeaderOptions">
            <summary>
            Swagger的header配置
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.Config.Options.FrameSwaggerOptions.SwaggerGenOptions">
            <summary>
            Swagger配置信息
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.Config.Options.FrameSwaggerOptions.SwaggerUIOptions">
            <summary>
            SwaggerUI的配置信息
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.Config.Options.FrameSwaggerOptions.XmlComments">
            <summary>
            XML 描述文件
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.Config.Options.SwaggerOpenApiInfo.GroupName">
            <summary>
            分组名称
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.Config.Options.SwaggerOpenApiInfo.OpenApiInfo">
            <summary>
            开放的接口信息
            </summary>
        </member>
        <member name="T:Application.Frame.Extension.Config.Options.SwaggerHeaderOptions">
            <summary>
            Swagger的header配置
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.Config.Options.SwaggerHeaderOptions.AttributeType">
            <summary>
            Attribute类型
            加上此Attribute类型的方法都会加上配置的header信息
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.Config.Options.SwaggerHeaderOptions.OpenApiParameter">
            <summary>
            Api参数配置信息
            </summary>
        </member>
        <member name="T:Application.Frame.Extension.Extensions.FrameAssemblyExtensions">
            <summary>
            Assembly拓展
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Extensions.FrameAssemblyExtensions.GetAssemblies">
            <summary>
            获取整个程序集的Assemblies
            </summary>
            <returns></returns>
        </member>
        <member name="M:Application.Frame.Extension.Extensions.FrameAssemblyExtensions.GetCustomAttributes``1">
            <summary>
            获取自定义Attribute的类型及Type信息
            </summary>
            <typeparam name="T">泛型 必须为 Attribute</typeparam>
            <returns></returns>
        </member>
        <member name="M:Application.Frame.Extension.Extensions.FrameAssemblyExtensions.InitializeAssembly">
            <summary>
            初始化Assemblies
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Extensions.FrameAssemblyExtensions.IsApiController(System.Type)">
            <summary>
            判断是否是Api控制器
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Application.Frame.Extension.Extensions.FrameAssemblyExtensions.IsApiAction(System.Reflection.MethodInfo,System.Type)">
            <summary>
            判断是否是方法
            </summary>
            <param name="method">方法</param>
            <param name="ReflectedType">反射类型</param>
            <returns></returns>
        </member>
        <member name="M:Application.Frame.Extension.Extensions.FrameAssemblyExtensions.SetAssemblies">
            <summary>
            设置Assemblies集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:Application.Frame.Extension.Extensions.FrameWebHostBuilderExtensions">
            <summary>
            此框架的WebHostBuilder拓展
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Extensions.FrameWebHostBuilderExtensions.UseFrameStartup(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            使用框架的Startup用来代替项目中的Startup
            </summary>
            <param name="hostBuilder">web主机</param>
            <returns></returns>
        </member>
        <member name="M:Application.Frame.Extension.Extensions.FrameWebHostBuilderExtensions.UseFrameStartup(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Type)">
            <summary>
            使用框架的Startup用来代替项目中的Startup 
            也可执行项目中的Startup
            </summary>
            <param name="hostBuilder">web主机</param>
            <param name="startupType">在项目中的Startup类型</param>
            <returns></returns>
        </member>
        <member name="M:Application.Frame.Extension.Extensions.FrameWebHostBuilderExtensions.UseFrameStartup``1(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            使用框架的Startup用来代替项目中的Startup 
            也可执行项目中的Startup
            </summary>
            <typeparam name="TStartup">泛型 类型为 Startup</typeparam>
            <param name="hostBuilder">web主机</param>
            <returns></returns>
        </member>
        <member name="T:Application.Frame.Extension.Extensions.ServiceExtensions">
            <summary>
            服务拓展
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Extensions.ServiceExtensions.AddFrameServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            添加需要自动注册的服务集合
            </summary>
            <param name="services">服务集合</param>
            <param name="Configuration">属性配置信息</param>
        </member>
        <member name="M:Application.Frame.Extension.Extensions.ServiceExtensions.AddMvcNewtonsoftJson(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions},System.Action{Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions})">
            <summary>
            添加NewtonsoftJson作为项目输出的主要格式
            </summary>
            <param name="services">服务集合</param>
            <param name="mvcAction">Mvc配置委托</param>
            <param name="jsonAction">NewtonsoftJson配置委托</param>
        </member>
        <member name="M:Application.Frame.Extension.Extensions.ServiceExtensions.AddSwaggerServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Application.Frame.Extension.Config.Options.FrameSwaggerOptions})">
            <summary>
            添加Swagger文档服务
            </summary>
            <param name="services">服务集合</param>
            <param name="frameSwaggerAction">Swagger配置信息</param>
        </member>
        <member name="T:Application.Frame.Extension.FrameContainer">
            <summary>
            静态容器类（代替缓存的作用，存储一些固定的信息）
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.FrameContainer.Options">
            <summary>
            自定义OptionAttribute的信息集合
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.FrameContainer.AttributeTypes">
            <summary>
            属性类型集合
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.FrameContainer.OptionAttributes">
            <summary>
            OptionAttribute信息
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.FrameContainer.ServiceAttributes">
            <summary>
            ServiceAttribute信息
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.FrameContainer.Assemblies">
            <summary>
            整个项目的静态的Assemblies
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.FrameContainer.ServiceProvider">
            <summary>
            全局静态变量ServiceProvider
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.FrameContainer.FrameSwaggerOptions">
            <summary>
            Swagger的配置信息
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.FrameContainer.ControllerTypes">
            <summary>
            控制器类型
            </summary>
        </member>
        <member name="P:Application.Frame.Extension.FrameContainer.ControllerActions">
            <summary>
            控制器方法
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.FrameHostingStartup.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            配置
            </summary>
            <param name="builder">WebHost主机</param>
        </member>
        <member name="M:Application.Frame.Extension.FrameHostingStartup.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Type)">
            <summary>
            配置
            </summary>
            <param name="builder">WebHost主机</param>
            <param name="originalStartup">Startup的Type</param>
        </member>
        <member name="M:Application.Frame.Extension.FrameHostingStartup.LoadOriginalStartup(Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            加载携带的Startup文件
            </summary>
            <param name="webBuilder"></param>
            <param name="services"></param>
            <param name="originalStartup"></param>
        </member>
        <member name="P:Application.Frame.Extension.Startup.Configuration">
            <summary>
            配置项
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:Application.Frame.Extension.Utils">
            <summary>
            内部工具类
            </summary>
        </member>
        <member name="M:Application.Frame.Extension.Utils.BindInstance(System.Type,System.Object,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Configuration.BinderOptions)">
            <summary>
            绑定实体
            </summary>
            <param name="type">需要绑定的实体的类型</param>
            <param name="instance">实体对象</param>
            <param name="config">IConfiguration信息通过Configuration.GetSection获取</param>
            <param name="options">绑定的配置信息（默认false）</param>
            <returns></returns>
        </member>
        <member name="P:Application.Frame.Extension.Utils.SR.Error_CannotActivateAbstractOrInterface">
            <summary>Cannot create instance of type '{0}' because it is either abstract or an interface.</summary>
        </member>
        <member name="P:Application.Frame.Extension.Utils.SR.Error_FailedBinding">
            <summary>Failed to convert configuration value at '{0}' to type '{1}'.</summary>
        </member>
        <member name="P:Application.Frame.Extension.Utils.SR.Error_FailedToActivate">
            <summary>Failed to create instance of type '{0}'.</summary>
        </member>
        <member name="P:Application.Frame.Extension.Utils.SR.Error_MissingConfig">
            <summary>'{0}' was set on the provided {1}, but the following properties were not found on the instance of {2}: {3}</summary>
        </member>
        <member name="P:Application.Frame.Extension.Utils.SR.Error_MissingParameterlessConstructor">
            <summary>Cannot create instance of type '{0}' because it is missing a public parameterless constructor.</summary>
        </member>
        <member name="P:Application.Frame.Extension.Utils.SR.Error_UnsupportedMultidimensionalArray">
            <summary>Cannot create instance of type '{0}' because multidimensional arrays are not supported.</summary>
        </member>
    </members>
</doc>
